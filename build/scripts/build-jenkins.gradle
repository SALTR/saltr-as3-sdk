
//Define output directory for swc and documentation
def SALTR_SDK_VERSION = "1.3.8"
def outdir = "saltr-sdk.v."+SALTR_SDK_VERSION
println "Output directory: "+outdir

def workspace =System.getenv()['WORKSPACE']
println "Workspace: "+workspace

// needed for deploying
apply plugin: 'maven'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://raw.githubusercontent.com/vpmedia/mvnrepository/master'
    }
    maven {
        url 'https://oss.sonatype.org/content/groups/public/'
    }
}

configurations {
    antClassPath
    compile
    test
}

dependencies {
    test group: 'org.apache', name: 'flexunit-tasks', version: '4.2.0-20140410', ext: 'jar'
    test group: 'org.apache', name: 'flexunit-as3', version: '4.2.0-20140410', ext: 'swc'
    test group: 'org.apache', name: 'flexunit-cilistener', version: '4.2.0-20140410', ext: 'swc'
    test group: 'org.apache', name: 'flexunit-uilistener', version: '4.2.0-20140410', ext: 'swc'
    test group: 'org.apache', name: 'flexunit-aircilistener', version: '4.2.0-20140410', ext: 'swc'
    test group: 'org.apache', name: 'hamcrest-as3', version: '1.1.3', ext: 'swc'
    test group: 'org.apache', name: 'flex-pmd-ant-task', version: '1.3', ext: 'jar'
    test group: 'org.apache', name: 'flex-pmd-files', version: '1.3', ext: 'jar'
    test group: 'org.apache', name: 'flex-pmd-core', version: '1.3', ext: 'jar'
    test group: 'org.apache', name: 'flex-pmd-ruleset', version: '1.3', ext: 'jar'
    test group: 'org.apache', name: 'flex-pmd-ruleset-api', version: '1.3', ext: 'jar'
    test group: 'org.apache', name: 'flex-pmd-cpd', version: '1.3', ext: 'jar'
    test group: 'org.apache', name: 'flex-pmd-cpd-ant-task', version: '1.3', ext: 'jar'
    test group: 'org.apache', name: 'flex-pmd-metrics', version: '1.3', ext: 'jar'
    test group: 'org.apache', name: 'flex-pmd-metrics-ant-task', version: '1.3', ext: 'jar'
    test group: 'org.apache', name: 'as3-parser', version: '1.3', ext: 'jar'
    test group: 'org.apache', name: 'as3-parser-api', version: '1.3', ext: 'jar'
    test group: 'org.apache', name: 'as3-plugin-utils', version: '1.3', ext: 'jar'
    test group: 'pmd', name: 'pmd', version: '4.2.5', ext: 'jar'
    test group: 'commons-lang', name: 'commons-lang', version: '2.4', ext: 'jar'
    test group: 'org.codehaus.plexus', name: 'plexus-utils', version: '3.0.17', ext: 'jar'
    antClassPath 'ant-contrib:ant-contrib:1.0b3', 'org.apache.ant:ant-junit:1.9.4'
}

// extra static XSLT dependency for FlexPMD
def xsltFile = "https://raw.githubusercontent.com/vpmedia/mvnrepository/master/org/apache/flex-pmd-report/1.3/flex-pmd-report-1.3.xslt"

// add additional jars to the AntBuilder classpath for use within the imported build.
ClassLoader antClassLoader = org.apache.tools.ant.Project.class.classLoader
configurations.antClassPath.each { File f ->
    antClassLoader.addURL(f.toURI().toURL())
}

//----------------------------------
//  SDK
//----------------------------------

def AIR_HOME = 'C:/jenkins_tools/AIRSDK_Compiler_19.0' //System.getenv('AIR_HOME')
def FLEX_HOME = 'C:/jenkins_tools/flex_sdk_4.6' //System.getenv('FLEX_HOME')
def FLASH_PLAYER_EXE = 'C:/jenkins_tools/FLASH_PLAYER/flashplayer_16_sa.exe' // System.getenv('FLASH_PLAYER_EXE')
ant.FLEX_HOME = FLEX_HOME
ant.FLASH_PLAYER_EXE = FLASH_PLAYER_EXE

//----------------------------------
//  Core
//----------------------------------

// Set default properties
version = '1.6.0-SNAPSHOT'
group = 'com.plexonic'

// Get version from Jenkins CI
if("${System.env.JENKINS_BUILD_VERSION}" != "null") {
    version = "${System.env.JENKINS_BUILD_VERSION}"
}

// Get version from TeamCity CI
if("${System.env.BUILD_NUMBER}" != "null") {
    version = "${System.env.BUILD_NUMBER}"
}

//----------------------------------
//  Folders
//----------------------------------

def projectDir = workspace

//def binDir = new File(projectDir, '/bin')
def libDir = new File(projectDir, '/build/tests/lib')
def buildDir = new File(projectDir, '/build/tests/build')
//def publishDir = new File(projectDir, '/publish')
def reportDir = new File(projectDir, '/build/tests/reports')
def srcDir = new File(projectDir, '/src')
def testDir = new File(projectDir, '/saltr-tests')
//def fixturesDir = new File(projectDir, '/fixtures')

//----------------------------------
//  Tasks
//----------------------------------

task clean_init << {
    if (binDir.isDirectory()) {
        delete(binDir)
    }
    if (buildDir.isDirectory()) {
        delete(buildDir)
    }
    if (fixturesDir.isDirectory()) {
        delete(fixturesDir)
    }
}

task build(type: JavaExec) {
    main = "com.adobe.flash.compiler.clients.COMPC"
    classpath = files("${AIR_HOME}/lib/compiler.jar")
    workingDir = "${projectDir}"
    def argsList = []
    argsList.push('-directory=false')
    argsList.push('-debug=true')
    def includeSources = '-include-sources=' + srcDir
    argsList.push(includeSources)
    argsList.push('-output='+"${workspace}/${outdir}"+'/saltr-sdk.swc');
    def airConfig = "${AIR_HOME}" + '/frameworks/air-config.xml'
    def loadAirConfig = '-load-config+='+"${airConfig}";
    argsList.push(loadAirConfig)
    args = argsList
}

task compileTest(type: JavaExec) {
    main = "flex2.tools.Mxmlc"
    classpath = files("${FLEX_HOME}/lib/mxmlc.jar")
    classpath += files("${AIR_HOME}/lib/compiler.jar")
    workingDir = "${FLEX_HOME}/frameworks"
    def argsList = []
    argsList.push('-debug=true')
    argsList.push("${testDir}/FlexUnitRunner.as")
    argsList.push("-source-path=${srcDir}")
    argsList.push("-source-path=${testDir}")
    argsList.push("-output=${buildDir}/tests.swf")
    argsList.push("-library-path+=${libDir}");
    argsList.push("-library-path+=${FLEX_HOME}/frameworks/libs")
    argsList.push('-static-link-runtime-shared-libraries=true')

    //def airConfig = "${AIR_HOME}" + '/frameworks/air-config.xml'
    def airConfig = "${AIR_HOME}" + '/frameworks/airmobile-config.xml'
    def loadAirConfig = '-load-config+='+"${airConfig}";
    argsList.push(loadAirConfig)

    argsList.push("+configname=air")

    args = argsList
}

task test << {
    if (reportDir.isDirectory()) {
        delete("${reportDir}")
    }
    if(testDir.isDirectory()) {
        def testTaskResult = 'testTaskResult'
        def testRunner = new File(projectDir, 'build/tests/build/tests.swf')
        def htmlOutputDir = new File(projectDir, 'build/tests/reports/html')
        reportDir.mkdirs()
        ant.taskdef(resource: 'flexUnitTasks.tasks', classpath: configurations.test.asPath)

        ant.flexunit(swf: testRunner, toDir: reportDir, haltonfailure:'false', failureproperty: testTaskResult, verbose:'true', player:'air', headless:'false', localTrusted:'true')
    }
}

artifacts {
    archives file('build/starling.swc')
}

uploadArchives {
    repositories {
        mavenLocal()
    }
}

test.dependsOn compileTest

task generateSaltrDoc << {
    println 'generating SALTR doc'
    exec {
        executable = "C:/jenkins_tools/AIRSDK_Compiler_19.0/bin/aasdoc.bat"
        args = ["-doc-sources",
                workspace+"/src",
                "-output",
                workspace+"/"+outdir+"/doc",
                "-library-path",
                "C:/jenkins_tools/AIRSDK_Compiler_19.0/frameworks/libs/air",
                "-main-title", "SALTR SDK Version "+"${SALTR_SDK_VERSION}",
                "-window-title", "SALTR SDK Version "+"${SALTR_SDK_VERSION}"] }
}

generateSaltrDoc.dependsOn build
